平衡二叉树
    满二叉树一定是平衡二叉树


    定义: 对于任意一个节点，左子树和右子树的高度差不能超过1
    平衡二叉树的高度和节点数量之间的关系也是O(logn)
    标注节点的高度
    计算平衡因子: 每一个节点左右子树的高度差(我们用左子树的高度-右子树的高度)
                叶子节点左右子树为空，空树高度为0


                12
             /      \
            8       18
          /   \    /
         5    11  17
        /
       4
    以上的二叉树就是平衡二叉树


                    12
                 /      \
                8       18
              /   \    /
             5    11  17
            / \
           4   7
          /
         2
    以上的树不是平衡二叉树



AVL
    改进二分搜索树可能会退化成链表的问题

    AVL是平衡二叉树
    AVL也是二分搜索树


    在什么时候维护平衡
        在二分搜索树中插入节点的位置都是叶子节点
        不平衡的节点只有可能发生在从插入的节点开始向其父亲节点去找，因为插入节点之后才破坏了整棵树的平衡性，破坏整颗树的平衡性将反映在新节点的父亲节点或者祖先节点上，因为新插入一个节点后，这个节点对应的父亲节点或者祖先节点的高度值需要进行更新，在更新之后有可能平衡因子会大于1或者小于-1

        加入节点后，沿着节点向上维护平衡性
        在递归逻辑中，更新完该节点height之后就代表新插入节点完成，然后计算出该节点的平衡因子，之后就需要进行平衡维护，最后将维护完平衡性的node进行返回，到递归的上一层，递归的上一层也就是看当前处理节点的父亲节点，在递归的上一层如果平衡因子依然不满足要求，就需要再次进行维护平衡性，之后再将根节点返回给上一层，依次类推



    右旋转(插入的元素在不平衡的节点的左侧的左侧，LL)
        插入z节点后，对于y节点来说已经不满足平衡二叉树的条件
        y节点左子树的高度比右子树的高度要高，而且高度差大于1
        对于y节点左孩子x，x节点左子树的高度大于等于右子树的高度

        以y为根节点的树，不满足平衡二叉树的性质，并且整体是向左倾斜的
        z节点可能有左右子树，这里称为T1/T2，x/y节点可能有右子树，这里称为T3/T4
                    y
                 /     \
                x       T4
              /   \
             z    T3
           /   \
          T1   T2

            对于二分搜索树的性质
                T1<z<T2<x<T3<y<T4

            node   height
            z       h+1
            T3      h+1, h
            x       h+2
            T4      h

        维护平衡(右旋转)
            x.right=y
            y.left=T3

            维护平衡后的树如下，仍是满足二分搜索树的性质，同时满足平衡二叉树的性质
                 x
              /     \
             z       y
           /   \   /   \
          T1   T2 T3   T4

            node   height
            z       h+1
            T3      h+1, h
            T4      h
            y       h+2, h+1


    左旋转(插入的元素在不平衡的节点的右侧的右侧，RR)
        插入z节点后，对于y节点来说已经不满足平衡二叉树的条件
        y节点右子树的高度比左子树的高度要高，而且高度差大于1
        对于y节点右孩子x，x节点右子树的高度大于等于左子树的高度

        以y为根节点的树，不满足平衡二叉树的性质，并且整体是向右倾斜的
        z节点可能有左右子树，这里称为T1/T2，x/y节点可能有右子树，这里称为T3/T4
                    y
                 /     \
                T4       x
                        /   \
                       T3    z
                           /   \
                          T1   T2

            对于二分搜索树的性质
                T4<y<T3<x<T1<z<T2

            node   height
            z       h+1
            T3      h+1, h
            x       h+2
            T4      h

        维护平衡(左旋转)
            x.left=y
            y.right=T3

            维护平衡后的树如下，仍是满足二分搜索树的性质，同时满足平衡二叉树的性质
                 x
              /     \
             y       z
           /   \   /   \
          T4   T3 T1   T2

            node   height
            z       h+1
            T3      h+1, h
            T4      h
            y       h+2, h+1



    (插入的元素在不平衡的节点的左侧的右侧，LR)
                y
             /     \
            x       T4
          /   \
         T1    z
             /   \
            T2   T3

        首先对x进行左旋转，转化为了LL的情况，然后在对y进行右旋转

    (插入的元素在不平衡的节点的右侧的左侧，RL)
                y
             /     \
            T1      x
                  /   \
                z      T4
              /   \
             T2   T3

        首先对x进行右旋转，转化为了RR的情况，然后在对y进行左旋转