平衡二叉树
    对于整颗树来说，最大深度与最小深度的差最多为1
    完全二叉树是平衡二叉树
    堆也是平衡二叉树
    二分搜索树不一定是平衡二叉树
    平衡二叉树不会退化成链表

线段树
    适用于动态数据的区间表示
        如果是静态数据的区间加和表示，不需要使用线段树，只需要在初始化时，计算数组中前i元素的和即可，sum[i]存储前i元素和，sum[0] = 0，需要计算[i,j]的和，即sum[j-1] - sum[i]

    线段树不是完全二叉树
    线段树是平衡二叉树

    依然可以用数组表示
    线段树可以看成满二叉树，在最后一层很多节点是不存在的，对于不存在的节点看作空即可

    对于满二叉树
        h层，一共有2^h-1个节点(大约是2^h)
        最后一层(h-1层)，有2^(h-1)个节点
        最后一层的节点数大于等于前面所有层节点之和

    如果区间有n个元素，数组表示需要多少节点
        如果n=2^k，只需要2n的空间
        最坏的情况，如果n=2^k+1，需要4n的空间

    线段树不考虑添加元素，即区间固定，使用4n的静态空间即可

    在数组中左孩子和右孩子的索引的计算方式和堆一样

    线段树所表示的区间就是在数组中的索引区间

    如果用数组来存储线段树，对于某个节点来说
        数组从索引为1开始存放节点，子节点的索引关系如下
            left child(i) = 2 * i
            right child(i) = 2 * i + 1

        数组从索引为0开始存放节点，子节点的索引关系如下
            left child(i) = 2 * i + 1
            right child(i) = 2 * i + 2

    懒惰更新
        将[l,r]区间中所有元素+i
        更新完中间节点之后，其实还要更新其叶子节点，但是我们先不进行更新
        使用lazy数组记录未更新的叶子节点
        等待下一次更新或者查询操作，再遇到这些叶子节点之前先查一下lazy数组中是否有之前需要更新的内容但是没有更新的，再访问这些叶子节点前，先将lazy数组中记录的未更新的内容进行更新，更新之后再来进行应该做的操作


    一维线段树: 处理的区间是在一维空间中，是在一个坐标轴中
    二维线段树: 线段树的节点记录的是矩阵的内容，然后将矩阵分成左上又上左下右下四块，作为矩阵的孩子节点(更小的矩阵)，然后对于这些孩子节点在进行矩阵的分块


    链式动态线段树
        可以根据所关注的区间，动态生成线段树，如下图，对于区间[0,100000000]，只关注[5,16]的话，只需要生成如下的线段树即可

        关注[5,16]
                    0 - 100000000
        0 - 4                           5 - 100000000
                            5 - 16                          16 - 100000000

树状数组(Binary index tree)
    解决的部份问题和线段树重叠